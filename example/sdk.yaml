twitter_source:
  _target_: obsei.source.twitter_source.TwitterSourceConfig
  keywords:
    - "@sample"
  lookup_period: "1d"
  tweet_fields:
    - "author_id"
    - "conversation_id"
    - "created_at"
    - "id"
    - "public_metrics"
    - "text"
  user_fields:
    - "id"
    - "name"
    - "public_metrics"
    - "username"
    - "verified"
  expansions:
    - "author_id"
  place_fields: []
  max_tweets: 10
  credential:
    _target_: obsei.source.twitter_source.TwitterCredentials
    bearer_token: "bearer_token"

play_store_source:
  _target_: obsei.source.playstore_reviews.PlayStoreConfig
  package_name: "com.company.package"
  max_results: 10
  num_retries: 2
  cred_info:
    _target_: obsei.source.playstore_reviews.GoogleCredInfo
    service_cred_file: "foo/credential.json"
    developer_key: "test_key"

daily_get_sink:
  _target_: obsei.sink.dailyget_sink.DailyGetSinkConfig
  url: "http://localhost:8080/sample"
  partner_id: "123456"
  consumer_phone_number: "1234567890"
  source_information: "Twitter @sample"
  base_payload:
    partnerId: daily_get_sink.partner_id
    consumerPhoneNumber: daily_get_sink.consumer_phone_number

http_sink:
  _target_: obsei.sink.http_sink.HttpSinkConfig
  url: "http://localhost:8080/sample"

elasticsearch_sink:
  _target_: obsei.sink.elasticsearch_sink.ElasticSearchSinkConfig
  host: "localhost"
  port: 9200
  index_name: "test"

jira_sink:
  _target_: obsei.sink.jira_sink.JiraSinkConfig
  url: "http://localhost:2990/jira"
  username: "user"
  password: "pass"
  issue_type:
    name: "Task"
  project:
    key: "CUS"

analyzer_config:
  _target_: obsei.analyzer.classification_analyzer.ClassificationAnalyzerConfig
  labels:
    - "service"
    - "delay"
    - "tracking"
    - "no response"
  add_positive_negative_labels: false

analyzer:
  _target_: obsei.analyzer.classification_analyzer.ZeroShotClassificationAnalyzer
  model_name_or_path: "typeform/mobilebert-uncased-mnli"
  device: "auto"

slack_sink:
  _target_: obsei.sink.SlackSink

slack_sink_config:
  _target_: obsei.sink.SlackSinkConfig
  slack_token: 'Enter token'
  channel_id: 'slack channel id'
  jinja_template: |
    ```
           {%- for key, value in payload.items() recursive%}
               {%- if value is mapping -%}
      {{loop(value.items())}}
               {%- else %}
      {{key}}: {{value}}
               {%- endif %}
           {%- endfor%}
    ```
